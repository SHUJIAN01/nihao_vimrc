" =============================================================================
"        << 判断操作系统是 Windows 还是 Linux 和判断是终端还是 Gvim >>
" =============================================================================
 
" -----------------------------------------------------------------------------
"  < 判断操作系统是否是 Windows 还是 Linux >
" -----------------------------------------------------------------------------
let g:iswindows = 0
let g:islinux = 0
if(has("win32") || has("win64") || has("win95") || has("win16"))
    let g:iswindows = 1
else
    let g:islinux = 1
endif
 
" -----------------------------------------------------------------------------
"  < 判断是终端还是 Gvim >
" -----------------------------------------------------------------------------
if has("gui_running")
    let g:isGUI = 1
else
    let g:isGUI = 0
endif
" =============================================================================
"        << 判断操作系统是 Windows 还是 Linux 和判断是终端还是 Gvim >>
" =============================================================================END

" =============================================================================
"                          << 以下为软件默认配置 >>
" =============================================================================
 
" -----------------------------------------------------------------------------
"  < Windows Gvim 默认配置> 做了一点修改
" -----------------------------------------------------------------------------
if (g:iswindows && g:isGUI)
    source $VIMRUNTIME/vimrc_example.vim
    source $VIMRUNTIME/mswin.vim
    behave mswin
    set guioptions-=L               " 把gui左边的滑动条去掉
    "set guioptions-=r               " 把gui右边的滑动条去掉
    set diffexpr=MyDiff()
    function MyDiff()
        let opt = '-a --binary '
        if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
        if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
        let arg1 = v:fname_in
        if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
        let arg2 = v:fname_new
        if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
        let arg3 = v:fname_out
        if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
        let eq = ''
        if $VIMRUNTIME =~ ' '
            if &sh =~ '\<cmd'
                let cmd = '""' . $VIMRUNTIME . '\diff"'
                let eq = '"'
            else
                let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
            endif
        else
            let cmd = $VIMRUNTIME . '\diff'
        endif
        silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
    endfunction
endif

" -----------------------------------------------------------------------------
"  < Linux Gvim/Vim 默认配置> 做了一点修改
" -----------------------------------------------------------------------------
if g:islinux
    set hlsearch        "高亮搜索
    set incsearch       "在输入要搜索的文字时，实时匹配
 
    " Uncomment the following to have Vim jump to the last position when
    " reopening a file
    if has("autocmd")
        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    endif
 
    if g:isGUI
        " Source a global configuration file if available
        if filereadable("/etc/vim/gvimrc.local")
            source /etc/vim/gvimrc.local
        endif
    else
        " This line should not be removed as it ensures that various options are
        " properly set to work with the Vim-related packages available in Debian.
        runtime! debian.vim
 
        " Vim5 and later versions support syntax highlighting. Uncommenting the next
        " line enables syntax highlighting by default.
        if has("syntax")
            syntax on
        endif
 
        "set mouse=a                    " 在任何模式下启用鼠标
        set t_Co=256                   " 在终端启用256色
        "set backspace=2                " 设置退格键可用
 
        " Source a global configuration file if available
        if filereadable("/etc/vim/vimrc.local")
            source /etc/vim/vimrc.local
        endif
    endif
endif

" =============================================================================
"                          << 以下为用户自定义配置 >>
" =============================================================================
"
"
"
"
"
"
"
"
"
"
"
"
"==============================基础配置==============================
set nocompatible                        "关闭vi兼容

"---------------------------------------【filetype设置】
filetype on                             "打开文件类型检测功能
filetype plugin on                      "允许gvim/vim加载文件类型插件
filetype indent on                      "允许gvim/vim为不同类型的文件定义不同的缩进格式

"set go=                                 "无菜单工具条
syntax enable                           "语法高亮，只在当前文件中有效
syntax on                               "语法高亮，对所有缓冲区中的文件立刻生效
set guifont=Consolas:h16                "设置字体类型和大小
color desert                            "配色方案
"---------------------------------------"【禁止临时文件】
" [注意] 不一定顶用的话还需要把vimrc_example.vim文件中的['set nobackup' 与 'set undofile']行注释掉
set noundofile                          "不生成undo备份 .filename.un~
set nobackup                            "不生成备份文件 filename~
set noswapfile                          "不生成交换文件 .filename.swp

set autoread                            "当文件在外部被修改，自动更新该文件

set history=400                         "保留历史记录

"---------------------------------------【制表符设置】
set tabstop=4                           "tab宽度
set expandtab                           "把tab转成空格
set smarttab                            "根据文件中其他地方的缩进空格个数来确定一个 tab 是多少个空格
set shiftwidth=4                        "缩进的空格数
set softtabstop=4                       "软制表符宽度

" 设置 gVim 窗口初始位置及大小
if g:isGUI
    " au GUIEnter * simalt ~x                           "窗口启动时自动最大化
    winpos 100 10                                     "指定窗口出现的位置，坐标原点在屏幕左上角
    set lines=38 columns=120                          "指定窗口大小，lines为高度，columns为宽度
endif

"---------------------------------------【设置文件的代码形式 utf8】
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,chinese,cp936

"---------------------------------------【显示乱码设置】
if (g:iswindows && g:isGUI)
    "解决菜单乱码
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    "解决consle输出乱码
    language messages zh_CN.utf-8
    let Tlist_Ctags_Cmd='D:\dev\vim\ctags58\ctags.exe'          " ctags.exe路径【Linux不需要】
endif

"---------------------------------------【插入模式下使用 <BS>、<Del> <C-W> <C-U>】
set backspace=indent,eol,start

"---------------------------------------查找设置
set ignorecase                          "在查找时忽略大小写
set incsearch                           "增量查找
set hlsearch                            "高亮显示查找

"---------------------------------------获取当前目录
func GetPWD()
    return substitute(getcwd(), "", "", "g")
endf
"---------------------------------------命令行于状态行
set ch=1
set stl=\ [File]\ %F%m%r%h%y[%{&fileformat},%{&fileencoding}]\ %w\ \ [PWD]\ %r%{GetPWD()}%h\ %=\ [Line]\ %l,%c\ %=\ %P
set ls=2                                " 始终显示状态行

"---------------------------------------切换标签快捷键：F11向左,F12向右
map <F11> :tabn<CR>
map <F12> :tabp<CR>

"==============================基础配置==============================END

"==============================TagList配置==============================
let Tlist_Show_One_File=1                                   "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow=1                                 "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1                              "在右侧窗口中显示taglist窗口
let Tlist_Use_SingleClick = 1                               "单击tag就跳转到定义
let Tlist_Process_File_Always=1                             "实时更新tags
"let Tlist_Inc_Winwidth=0

"打开tag窗口快捷键F9
nmap <F9> :TlistToggle<CR>
"==============================TagList配置==============================END

"==============================NERDTree配置==============================
let g:NERDTreeWinPos="left"
let g:NERDTreeWinSize=25
let g:NERDTreeShowLineNumbers=1
let g:neocomplcache_enable_at_startup = 1
" 打开nerdTree窗口快捷键F4
map <F4> :NERDTreeMirror<CR>
map <F4> :NERDTreeToggle<CR>
"==============================NERDTree配置==============================END

"==============================indentLine配置==============================
let indentLine_color_gui = '#A4E57E'
let indentLine_bgcolor_term = 202
let indentLine_bgcolor_gui = '#FF5F00'
"==============================indentLine配置==============================END

"==============================彩虹括号配置==============================
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
"==============================彩虹括号配置==============================END

"==============================vim-better-whitespace显示行尾空格配置==============================
" '\' + '空格键' 去除多余空格
map <leader><space> :StripWhitespace<cr>
"==============================vim-better-whitespace显示行尾空格配置==============================END
















































